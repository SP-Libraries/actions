name: Setup Environment

inputs:
  VERBOSE:
    type: boolean
    default: false
    required: false
    description: 'Enable verbose output'
  FETCH_DEPTH:
    required: false
    type: number
    default: 1
    description: 'Git fetch depth (0 for all history)'
  PHP_VERSION:
    type: string
    default: '8.3'
    required: false
    description: 'PHP version to install (only used if composer.json exists)'
  NODE_VERSION:
    type: string
    default: '21'
    required: false
    description: 'Node.js version to install (only used if package.json exists)'
  CACHE_KEY_PREFIX:
    type: string
    default: 'deps'
    required: false
    description: 'Prefix for the cache key'
  INSTALL_DEPENDENCIES:
    type: boolean
    default: false
    required: false
    description: 'Set to true to include dependency installation'
  INSTALL_DEV_DEPENDENCIES:
    type: boolean
    default: false
    required: false
    description: 'Set to true to include dev dependencies'
  RUN_BUILD:
    type: boolean
    default: false
    required: false
    description: 'Set to true to run the build step'
  GH_TOKEN:
    type: string
    default: ''
    required: false
    description: 'GitHub token for authentication'

outputs:
  has_php:
    description: 'Whether PHP environment was detected and set up'
    value: ${{ steps.detect-languages.outputs.has_php }}
  has_node:
    description: 'Whether Node.js environment was detected and set up'
    value: ${{ steps.detect-languages.outputs.has_node }}
  has_both:
    description: 'Whether both PHP and Node.js environments were detected'
    value: ${{ steps.detect-languages.outputs.has_both }}
  php_version:
    description: 'PHP version that was set up'
    value: ${{ steps.detect-languages.outputs.php_version }}
  node_version:
    description: 'Node.js version that was set up'
    value: ${{ steps.detect-languages.outputs.node_version }}

runs:
  using: 'composite'
  steps:
    - name: Show Inputs
      if: ${{ inputs.VERBOSE == 'true' }}
      shell: bash
      run: |
        # Show all input parameters
        echo "VERBOSE: ${{ inputs.VERBOSE }}"
        echo "FETCH_DEPTH: ${{ inputs.FETCH_DEPTH }}"
        echo "PHP_VERSION: ${{ inputs.PHP_VERSION }}"
        echo "NODE_VERSION: ${{ inputs.NODE_VERSION }}"
        echo "CACHE_KEY_PREFIX: ${{ inputs.CACHE_KEY_PREFIX }}"
        echo "INSTALL_DEPENDENCIES: ${{ inputs.INSTALL_DEPENDENCIES }}"
        echo "INSTALL_DEV_DEPENDENCIES: ${{ inputs.INSTALL_DEV_DEPENDENCIES }}"
        echo "RUN_BUILD: ${{ inputs.RUN_BUILD }}"

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.GH_TOKEN }}
        fetch-depth: ${{ inputs.FETCH_DEPTH }}

    - name: Detect Languages
      id: detect-languages
      shell: bash
      run: |
        # Initialize variables
        has_php=false
        has_node=false
        has_both=false
        setup_php=false
        setup_node=false
        php_version=""
        node_version=""

        # Check for PHP files
        if [[ -f "composer.json" ]]; then
          echo "composer-json-exists=true" >> $GITHUB_OUTPUT
          echo "✅ composer.json found"
          has_php=true
          setup_php=true
          php_version="${{ inputs.PHP_VERSION }}"
        else
          echo "composer-json-exists=false" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.VERBOSE }}" == "true" ]]; then
            echo "❌ composer.json not found"
          fi
        fi

        if [[ -f "composer.lock" ]]; then
          echo "composer-lock-exists=true" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.VERBOSE }}" == "true" ]]; then
            echo "✅ composer.lock found"
          fi
        else
          echo "composer-lock-exists=false" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.VERBOSE }}" == "true" ]]; then
            echo "❌ composer.lock not found"
          fi
        fi

        # Check for Node.js files
        if [[ -f "package.json" ]]; then
          echo "package-json-exists=true" >> $GITHUB_OUTPUT
          echo "✅ package.json found"
          has_node=true
          setup_node=true
          node_version="${{ inputs.NODE_VERSION }}"
        else
          echo "package-json-exists=false" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.VERBOSE }}" == "true" ]]; then
            echo "❌ package.json not found"
          fi
        fi

        if [[ -f "package-lock.json" ]]; then
          echo "package-lock-exists=true" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.VERBOSE }}" == "true" ]]; then
            echo "✅ package-lock.json found"
          fi
        else
          echo "package-lock-exists=false" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.VERBOSE }}" == "true" ]]; then
            echo "❌ package-lock.json not found"
          fi
        fi

        # Set combined flags
        if [[ "$has_php" == "true" && "$has_node" == "true" ]]; then
          has_both=true
        fi

        # Output detection results
        echo "has_php=$has_php" >> $GITHUB_OUTPUT
        echo "has_node=$has_node" >> $GITHUB_OUTPUT
        echo "has_both=$has_both" >> $GITHUB_OUTPUT
        echo "setup_php=$setup_php" >> $GITHUB_OUTPUT
        echo "setup_node=$setup_node" >> $GITHUB_OUTPUT
        echo "php_version=$php_version" >> $GITHUB_OUTPUT
        echo "node_version=$node_version" >> $GITHUB_OUTPUT

        # Show detection summary
        echo "=== Language Detection Summary ==="
        echo -n "PHP detected: $has_php"
        if [[ -n "$php_version" ]]; then
          echo " (version: $php_version)"
        else
          echo
        fi
        echo -n "Node.js detected: $has_node"
        if [[ -n "$node_version" ]]; then
          echo " (version: $node_version)"
        else
          echo
        fi
        echo "Both languages: $has_both"

    - name: Setup PHP
      if: ${{ steps.detect-languages.outputs.setup_php == 'true' }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.PHP_VERSION }}
        tools: composer

    - name: Setup Node.js
      if: ${{ steps.detect-languages.outputs.setup_node == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Get Composer Cache Directory
      if: ${{ steps.detect-languages.outputs.setup_php == 'true' && steps.detect-languages.outputs.composer-json-exists == 'true' }}
      id: composer-cache
      run: |
        # Get the Composer cache directory
        echo "dir=$(composer config cache-dir)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache Dependencies
      if: ${{ steps.detect-languages.outputs.setup_php == 'true' || steps.detect-languages.outputs.setup_node == 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ${{ steps.detect-languages.outputs.setup_php == 'true' && steps.composer-cache.outputs.dir || '' }}
          ${{ steps.detect-languages.outputs.setup_node == 'true' && '~/.npm' || '' }}
        key: ${{ inputs.CACHE_KEY_PREFIX }}-${{ runner.os }}-php${{ inputs.PHP_VERSION }}-node${{ inputs.NODE_VERSION }}-dev${{ inputs.INSTALL_DEV_DEPENDENCIES }}-${{ hashFiles('**/composer.lock', '**/package-lock.json') }}
        restore-keys: |
          ${{ inputs.CACHE_KEY_PREFIX }}-${{ runner.os }}-php${{ inputs.PHP_VERSION }}-node${{ inputs.NODE_VERSION }}-dev${{ inputs.INSTALL_DEV_DEPENDENCIES }}-
          ${{ inputs.CACHE_KEY_PREFIX }}-${{ runner.os }}-php${{ inputs.PHP_VERSION }}-node${{ inputs.NODE_VERSION }}-
          ${{ inputs.CACHE_KEY_PREFIX }}-${{ runner.os }}-php${{ inputs.PHP_VERSION }}-
          ${{ inputs.CACHE_KEY_PREFIX }}-${{ runner.os }}-

    - name: Composer Validate
      if: ${{ steps.detect-languages.outputs.setup_php == 'true' && steps.detect-languages.outputs.composer-json-exists == 'true' && inputs.INSTALL_DEPENDENCIES == 'true' }}
      shell: bash
      run: |
        # Validate composer.json
        composer validate --no-interaction --strict

    - name: Install PHP Dependencies
      if: ${{ steps.detect-languages.outputs.setup_php == 'true' && steps.detect-languages.outputs.composer-json-exists == 'true' && inputs.INSTALL_DEPENDENCIES == 'true' }}
      shell: bash
      env:
        COMPOSER_AUTH: |
          {
            "github-oauth": {
              "github.com": "${{ inputs.GH_TOKEN }}"
            }
          }
      run: |
        # Install PHP dependencies
        if [[ "${{ inputs.INSTALL_DEV_DEPENDENCIES }}" == "true" ]]; then
          composer install --no-interaction --no-scripts
        else
          composer install --no-interaction --no-scripts --no-dev --prefer-dist --optimize-autoloader
        fi

    - name: Install Node.js Dependencies
      if: ${{ steps.detect-languages.outputs.setup_node == 'true' && steps.detect-languages.outputs.package-json-exists == 'true' && inputs.INSTALL_DEPENDENCIES == 'true' }}
      shell: bash
      run: |
        # Install Node.js dependencies
        if [[ "${{ inputs.INSTALL_DEV_DEPENDENCIES }}" == "true" ]]; then
          npm ci
        else
          export NODE_ENV=production
          npm ci --omit=dev
        fi

    - name: Run Build Step
      if: ${{ inputs.RUN_BUILD == 'true' && inputs.INSTALL_DEPENDENCIES == 'true' }}
      shell: bash
      run: |
        # Check if build is possible
        if [[ ! -f "package.json" ]]; then
          echo "::error::Build requested but no package.json found"
          exit 1
        fi

        # Check if build script exists
        if ! jq -e '.scripts.build' package.json > /dev/null 2>&1; then
          echo "::error::Build requested but no build script found in package.json"
          exit 1
        fi

        echo "✅ Build script found, running build..."
        npm run build

    - name: Show Environment Info
      if: ${{ inputs.VERBOSE == 'true' }}
      shell: bash
      run: |
        # Show environment information
        echo "=== Environment Information ==="

        echo "--- Language Detection Results ---"
        echo "PHP detected: ${{ steps.detect-languages.outputs.has_php }}"
        echo "Node.js detected: ${{ steps.detect-languages.outputs.has_node }}"
        echo "Both languages: ${{ steps.detect-languages.outputs.has_both }}"
        echo "PHP version used: ${{ steps.detect-languages.outputs.php_version }}"
        echo "Node.js version used: ${{ steps.detect-languages.outputs.node_version }}"

        echo "--- Project Files Status ---"
        echo "composer.json exists: ${{ steps.detect-languages.outputs.composer-json-exists }}"
        echo "composer.lock exists: ${{ steps.detect-languages.outputs.composer-lock-exists }}"
        echo "package.json exists: ${{ steps.detect-languages.outputs.package-json-exists }}"
        echo "package-lock.json exists: ${{ steps.detect-languages.outputs.package-lock-exists }}"

        echo "--- Tool Versions ---"
        if [[ "${{ steps.detect-languages.outputs.setup_php }}" == "true" ]]; then
          echo "PHP version:"
          php -v || echo "PHP not installed"
          echo "Composer version:"
          composer -V || echo "Composer not installed"
        fi

        if [[ "${{ steps.detect-languages.outputs.setup_node }}" == "true" ]]; then
          echo "Node.js version:"
          node -v || echo "Node.js not installed"
          echo "NPM version:"
          npm -v || echo "NPM not installed"
        fi

        echo "--- Cache Information ---"
        echo "Cache key prefix: ${{ inputs.CACHE_KEY_PREFIX }}"

        if [[ "${{ steps.detect-languages.outputs.setup_php }}" == "true" && "${{ steps.detect-languages.outputs.composer-json-exists }}" == "true" ]]; then
          echo "Composer cache directory: ${{ steps.composer-cache.outputs.dir }}"
        fi
